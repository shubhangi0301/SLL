#include <iostream>
using namespace std;
template <typename X>

class linkedlist
{   struct node
{
  public: X data;
          node* next;
};
    private: 
             node* tail;
    public:
    X n,n1,n2,n3,n4;
    int pos;
    linkedlist()
    {
     tail=NULL;
    }
    ~linkedlist()
    {   node* ptr=new node();
        node* temp=new node();
        if (!isempty())
		{  
			cout << "\nDeallocating memory...\n";
			ptr = tail->next;
			tail->next = NULL;
			while (ptr != NULL)
			{
				temp = ptr->next;
				delete ptr;
				ptr = temp;
			}
		}
    }
             void append()
             {  cout<<"enter data "<<endl;
                cin>>n;
                node* temp=new node;
                temp->data=n;
                if(tail==NULL)
                {
                    tail=temp;
                    tail->next=tail;
                }
                else
                {
                    temp->next=tail->next;
                    tail->next=temp;
                    tail=temp;
                }
             }
             void append_in_begin()
             {   cout<<"enter data to insert at begining"<<endl;
                 cin>>n1;
                 node* temp=new node;
                 temp->data=n1;
                 if(tail==NULL)
                 {
                     tail=temp;
                     tail->next=tail;
                 }
                 else
                 {
                     temp->next=tail->next;
                     tail->next=temp;
                 }
             }
             void append_in_pos()
             {  cout<<"enter the position where you want to insert the data"<<endl;
                cin>>pos;
                
                 
                 if(pos==1)
                 {
                     append_in_begin();
                 }
                 else
                 if(pos==no_of_data()+1)
                 {
                     append();
                 }
                 else
                 {   cout<<"enter the data you want to insert"<<endl;
                     cin>>n2;
                     node* temp=new node;
                     temp->data=n2;
                     node* ptr=new node;
                     ptr=tail->next;
                     int count=1;
                     while(count<pos-1)
                     {
                         ptr=ptr->next;
                         count++;
                     }
                     temp->next=ptr->next;
                     ptr->next=temp;
                 }
             }
             int no_of_data()
             {   if(tail==NULL)
             {
                 return 0;
             }
             else
             {
                 node* ptr=new node;
                 ptr=tail->next;
                 int count=0;
                 do{ ptr=ptr->next;
                     count++;
                 }while(ptr!=tail->next);
                 return count;
             }
             }
             void del_at_begin()
             {
                 if(tail==NULL)
                 {
                     cout<<"list is empty"<<endl;
                 }
                 else
                 if(tail==tail->next)
                 {   cout<<"deleting item from begining"<<endl;
                     tail=NULL;
                 }
                 else
                 {
                     cout<<"deleting item from begining"<<endl;
                     node* ptr=new node;
                     ptr=tail->next;
                     tail->next=ptr->next;
                     ptr=NULL;
                 }
             }
             void del_at_end()
             {
                 if(tail==NULL)
                 {
                     cout<<"list is empty"<<endl;
                 }
                 else
                 if(tail==tail->next)
                 {   cout<<"deleting item from begining"<<endl;
                     tail=NULL;
                 }
                 else
                 { node* ptr=new node;
                    ptr = tail;
			do
			{
				ptr = ptr->next;
			} while (ptr->next != tail);
			ptr->next = tail->next;
			delete tail;
			tail = ptr;
                 }
             }
             void del_in_pos()
             {   cout<<"enter the position where you want to delete the data"<<endl;
                 cin>>n3;
                 if(n3==1)
                 {
                     del_at_begin();
                 }
                 else
                 if(n3==no_of_data())
                 {
                     del_at_end();
                 }
                 else
                 {
                     cout<<"deleting data at n th position"<<endl;
                    int count=1;
                    node* ptr=new node;
                    ptr=tail->next;
                    while(count<n3-1)
                    {   ptr=ptr->next;
                        count++;
                    }
                    ptr->next=ptr->next->next;
                 }
             }
             void search()
             {  cout<<"enter the element you want to search"<<endl;
                cin>>n4;
                  if(isempty())
             {
                 cout<<"empty list"<<endl;
             }
             else
             {
                int count=1;
                int flag=0;
                node* ptr=new node;
                ptr=tail->next;
                do
                {
                    if(ptr->data==n4)
                    {
                        cout<<"element found at "<<count<<" position"<<endl;
                        flag=1;
                        break;
                    }
                    else
                    {
                        flag=0;
                    }
                        ptr=ptr->next;
                        count++;
                }while(ptr!=tail->next);
                if(flag==0)
                {
                    cout<<"element not found"<<endl;
                }
                
             }
             }
             void display()
             {
                node* ptr=new node;
                if(tail==NULL)
                {
                    cout<<"list is empty"<<endl;
                }
                else
                {   cout<<"your entered linked list is"<<endl;
                 ptr=tail->next;
                do
                {
                    cout<<ptr->data<<" "<<endl;
                    ptr=ptr->next;
                }while(ptr!=tail->next);
             }
             }
             void reverse()
             {  
                 node *temp1 = new node;
                  node *ptr = new node;
                   node *temp = new node;
                   if(isempty())
                   {
                       
                   }
                   else
                   if(tail==tail->next)
                   {
                       
                   }
                   else
                   {
		temp1 = tail->next;
		ptr = temp1->next;
		tail->next = NULL;
		tail = temp1;
		while (ptr != NULL)
		{
			temp = ptr;
			ptr = ptr->next;
			temp->next = temp1;
			temp1 = temp;
		}
		tail->next = temp1;
                   }  
             }
             bool isempty()
             {  
                 if(tail==NULL)
                 {
                    
                     return true;
                 }
                 else
                 {
                    
                     return false;
                 }
             }
             
};
int main()
{
   linkedlist<int> obj;
    int choice,flag=1;
 while(flag==1)
 {  cout<<"press 0 for exit"<<endl;
    cout<<"press 1 for displaying list"<<endl;
    cout<<"press 2 for appending list at end"<<endl;
    cout<<"press 3 for appending list at begin"<<endl;
    cout<<"press 4 for appending list in between"<<endl;
    cout<<"press 5 for total no. of data present in list"<<endl;
    cout<<"press 6 for deleting data at begining"<<endl;
    cout<<"press 7 for deleting data in the end"<<endl;
    cout<<"press 8 for deleting data in between"<<endl;
    cout<<"press 9 for search an element"<<endl;
    cout<<"press 10 for reversing the linkedlist"<<endl;
    cout<<"press 11 to check that list is empty or not"<<endl;
    cin>>choice;
    switch(choice)
    {
        case 0: flag=0;
                break;
        case 1: 
                obj.display();
                break;
        case 2:
                
                obj.append();
                break;
        case 3: 
                obj.append_in_begin();
                break;
        case 4: 
                obj.append_in_pos();
                break;
        case 5: cout<<"Total no. of data present in linked list are "<<obj.no_of_data()<<endl;
                break;
        case 6: 
                obj.del_at_begin();
                break;
        case 7:
               obj.del_at_end();
                break;
        case 8: 
              
              obj.del_in_pos();
              break;
        case 9:
              
              obj.search();
              break;
        case 10:
              cout<<"reversing the following linkedlist"<<endl;
             obj.reverse();
             obj.display();
              break;
        case 11:
             if(obj.isempty())
             {
                 cout<<"list is empty"<<endl;
             }
             else
             {
                 cout<<"list is not empty"<<endl;
             }
              break;
        default: cout<<"invalid input"<<endl;
    }
 }
    return 0;
}
